package br.com.trackmycity.servlet;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.Unmarshaller;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.collections.Predicate;

import br.com.trackmycity.beans.google.AddressComponent;
import br.com.trackmycity.beans.google.GeoLocation;
import br.com.trackmycity.beans.google.GeocodeResponse;
import br.com.trackmycity.beans.google.Result;
import br.com.trackmycity.enumerations.FormatEnum;
import br.com.trackmycity.enumerations.MapsTypeEnum;
import br.com.trackmycity.models.AdmLevelOne;
import br.com.trackmycity.models.AlertGroupType;
import br.com.trackmycity.models.AlertType;
import br.com.trackmycity.models.Country;
import br.com.trackmycity.models.Locality;
import br.com.trackmycity.models.Route;
import br.com.trackmycity.models.Sublocality;
import br.com.trackmycity.models.UserAlert;
import br.com.trackmycity.models.embeddable.Location;
import br.com.trackmycity.utils.GoogleUtils;

public class InitializeDataBase extends HttpServlet {

	private static final long serialVersionUID = 3248532085699862303L;

	@Inject GoogleUtils googleUtils;
	
	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		super.doGet(req, resp);
		double lat = Double.parseDouble(req.getParameter("lat"));
		double lng = Double.parseDouble(req.getParameter("lng"));
		main(lat, lng);
	}

	public void main(double lat, double lng) {
		try{
			EntityManagerFactory emf = Persistence.createEntityManagerFactory("trackmycity");
			EntityManager em = emf.createEntityManager();
			em.getTransaction().begin();
			//***************************************************************
			
			AlertGroupType group = new AlertGroupType();
			group.setName("Test Group");
			
			AlertType type = new AlertType();
			type.setName("Test Type");
			type.setAlertGroupType(group);
			
			em.persist(type);
			
			JAXBContext ctx = JAXBContext.newInstance(GeocodeResponse.class);
			Unmarshaller unmarshaller = ctx.createUnmarshaller();
			GeocodeResponse response = (GeocodeResponse)unmarshaller.unmarshal(googleUtils.loadGeoLocation(lat, lng, FormatEnum.XML));
			
			Result result = response.getResults().get(0);
			
			List resultList = new ArrayList();
			CollectionUtils.select(result.getAddressComponents(), new Predicate(){
	
				@Override
				public boolean evaluate(Object o) {
					AddressComponent ac = (AddressComponent)o;
					for (MapsTypeEnum type : ac.getTypes()) {
						if(type.equals(MapsTypeEnum.route)){
							return true;
						}
					}
					return false;
				}
				
			}, resultList);
			
			AddressComponent ac = (AddressComponent)resultList.get(0);
	
			Route route = new Route();
			route.setShortName(ac.getShortName());
			route.setLongName(ac.getLongName());
			
			resultList = new ArrayList();
			CollectionUtils.select(result.getAddressComponents(), new Predicate(){
	
				@Override
				public boolean evaluate(Object o) {
					AddressComponent ac = (AddressComponent)o;
					for (MapsTypeEnum type : ac.getTypes()) {
						if(type.equals(MapsTypeEnum.sublocality)){
							return true;
						}
					}
					return false;
				}
				
			}, resultList);
			
			ac = (AddressComponent)resultList.get(0);
			
			Sublocality sublocality = new Sublocality();
			sublocality.setShortName(ac.getShortName());
			sublocality.setLongName(ac.getLongName());
			route.setSublocality(sublocality);
			
			
			resultList = new ArrayList();
			CollectionUtils.select(result.getAddressComponents(), new Predicate(){
	
				@Override
				public boolean evaluate(Object o) {
					AddressComponent ac = (AddressComponent)o;
					for (MapsTypeEnum type : ac.getTypes()) {
						if(type.equals(MapsTypeEnum.locality)){
							return true;
						}
					}
					return false;
				}
				
			}, resultList);
			
			ac = (AddressComponent)resultList.get(0);
			
			Locality locality = new Locality();
			locality.setShortName(ac.getShortName());
			locality.setLongName(ac.getLongName());
			sublocality.setLocality(locality);
			
			resultList = new ArrayList();
			CollectionUtils.select(result.getAddressComponents(), new Predicate(){
	
				@Override
				public boolean evaluate(Object o) {
					AddressComponent ac = (AddressComponent)o;
					for (MapsTypeEnum type : ac.getTypes()) {
						if(type.equals(MapsTypeEnum.administrative_area_level_1)){
							return true;
						}
					}
					return false;
				}
				
			}, resultList);
			
			ac = (AddressComponent)resultList.get(0);
			
			AdmLevelOne admLevelOne = new AdmLevelOne();
			admLevelOne.setLongName(ac.getLongName());
			admLevelOne.setShortName(ac.getShortName());
			locality.setAdmLevelOne(admLevelOne);
			
			resultList = new ArrayList();
			CollectionUtils.select(result.getAddressComponents(), new Predicate(){
				
				@Override
				public boolean evaluate(Object o) {
					AddressComponent ac = (AddressComponent)o;
					for (MapsTypeEnum type : ac.getTypes()) {
						if(type.equals(MapsTypeEnum.country)){
							return true;
						}
					}
					return false;
				}
				
			}, resultList);
			
			ac = (AddressComponent)resultList.get(0);
			
			Country country = new Country();
			country.setShortName(ac.getShortName());
			country.setLongName(ac.getLongName());
			admLevelOne.setCountry(country);
			
			
			em.persist(route);
			
			UserAlert ua = new UserAlert();
			ua.setDescription("teste");
			ua.setFormattedAddress("Avenida Paulista, 519 - Bela Vista, São Paulo, República Federativa do Brasil");
			Location location = new Location();
			location.setLat("-23.5681126");
			location.setLng("-46.6485400");
			GeoLocation radians = GeoLocation.convertDegreesToRadians(Double.parseDouble("-23.5681126"), Double.parseDouble("-46.6485400"));
			location.setLatRadian(String.valueOf(radians.getLatitudeInRadians()));
			location.setLngRadian(String.valueOf(radians.getLongitudeInRadians()));
			ua.setLocation(location);
			ua.setPhoto("photo");
			ua.setStreetNumber("519");
			ua.setRoute(em.find(Route.class, new Long(1)));
			ua.setAlertType(type);
			
			em.persist(ua);
			//***************************************************************
			em.getTransaction().commit();
			em.close();
			emf.close();
		}catch(Exception e){
			e.printStackTrace();
		}
	}
	
	public static void main(String[] args) {
		EntityManagerFactory emf = Persistence.createEntityManagerFactory("trackmycity");
		EntityManager em = emf.createEntityManager();
		em.getTransaction().begin();
		em.getTransaction().commit();
		em.close();
		emf.close();
	}
	
}

